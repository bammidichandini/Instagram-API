trigger:
  branches:
    include:
    - main  # Change this to your source branch name (e.g., develop)
  paths:
    include:
    - '*'  # Trigger on all file changes

pool:
  vmImage: 'ubuntu-latest'  # Using Ubuntu agent

variables:
  # Repository information
  repoURL: 'https://github.com/bammidichandini/Instagram-API-Pord'  # CHANGE THIS to your repo URL
  sourceRef: 'refs/heads/main'  # Change to your source branch
  targetRef: 'refs/heads/main'  # Change to your target branch (e.g., main)
  system.debug: true  # Enable debug logging

steps:
# Step 1: Checkout the repository
- checkout: self
  persistCredentials: true  # Important: Allow Git commands in later steps
  fetchDepth: 0  # Fetch all history for all branches

# Step 2: Setup Git identity for the commit
- script: |
    git config --global user.email "pipeline@example.com"
    git config --global user.name "Azure Pipeline"
  displayName: 'Setup Git Identity'

# Step 3: Ensure we're working with the correct remote repository
- script: |
    # Verify current remote
    git remote -v
    
    # Update or add the remote if needed
    git remote set-url origin $(repoURL) || git remote add origin $(repoURL)
    
    # Fetch all branches from the correct repository
    git fetch --all
  displayName: 'Configure and fetch from repository'

# Step 4: Create a local branch tracking the target branch
- script: |
    git checkout -b target-local $(targetRef)
  displayName: 'Create local target branch'

# Step 5: Merge the source branch into the target branch
- script: |
    git merge $(sourceRef) --no-ff -m "Automated merge from $(sourceRef) to $(targetRef) via Azure DevOps Pipeline"
  displayName: 'Merge source into target'
  
# Step 6: Handle potential merge conflicts
- script: |
    if [ -n "$(git diff --name-only --diff-filter=U)" ]; then
      echo "Merge conflicts detected. Attempting auto-resolution by taking source branch changes."
      git diff --name-only --diff-filter=U | xargs git checkout --theirs
      git add .
      git commit -m "Resolved merge conflicts by taking source branch changes"
    fi
  displayName: 'Handle potential merge conflicts'
  continueOnError: true

# Step 7: Push changes to the target branch with authentication
- script: |
    # For GitHub using PAT
    git remote set-url origin https://x-access-token:$(GIT_PAT)@github.com/your-username/your-repo.git
    
    # Push to the target branch
    git push origin target-local:$(targetRef)
  displayName: 'Push changes to target branch'